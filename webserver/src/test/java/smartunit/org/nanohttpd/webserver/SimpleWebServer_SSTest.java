/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.org.nanohttpd.webserver;

/*
 * #%L
 * NanoHttpd-Webserver
 * %%
 * Copyright (C) 2012 - 2022 nanohttpd
 * %%
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the nanohttpd nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import java.io.File;
import java.util.LinkedList;
import java.util.Map;
import org.junit.runner.RunWith;
import org.nanohttpd.protocols.http.response.Response;
import org.nanohttpd.webserver.SimpleWebServer;
import org.nanohttpd.webserver.WebServerPlugin;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class)
@SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true)
public class SimpleWebServer_SSTest extends SimpleWebServer_SSTest_scaffolding {

    @Test(timeout = 4000)
    public void test_findIndexFileInDirectory_00() throws Throwable {
        // caseID:7eb851566cb3b3eaa47c16fb5633d609
        LinkedList<File> linkedList0 = new LinkedList<File>();
        SimpleWebServer simpleWebServer0 = new SimpleWebServer("1.0", 251, linkedList0, true);

        // prepare data for file0
        File file0 = mock(File.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn("~ecJ-i'D").when(file0).getAbsolutePath();
        Object object0 =
                PrivateAccess.callMethod((Class<SimpleWebServer>) SimpleWebServer.class, simpleWebServer0, "findIndexFileInDirectory", (Object) file0, (Class<?>) File.class);
        assertEquals("index.html", object0);
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test_registerPluginForMimeType_01() throws Throwable {
        // caseID:7adbb4f459f18f9a67777823daab115a
        LinkedList<File> linkedList0 = new LinkedList<File>();
        SimpleWebServer simpleWebServer0 = new SimpleWebServer("text/plain", 1, linkedList0, false);
        String[] stringArray0 = new String[6];
        stringArray0[0] = "([ |\t]*Content-Disposition[ |\t]*:)(.*)";
        stringArray0[1] = "AccessControlAllowHeader";
        stringArray0[2] = "AccessControlAllowHeader";
        stringArray0[3] = "origin,accept,content-type";
        stringArray0[4] = "origin,accept,content-type";
        stringArray0[5] = "([ |\t]*Content-Disposition[ |\t]*:)(.*)";
        WebServerPlugin webServerPlugin0 = mock(WebServerPlugin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        Map<String, String> map0 = (Map<String, String>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        Object object0 =
                PrivateAccess.callMethod((Class<SimpleWebServer>) SimpleWebServer.class, simpleWebServer0, "registerPluginForMimeType", (Object) stringArray0,
                        (Class<?>) String[].class, (Object) "", (Class<?>) String.class, (Object) webServerPlugin0, (Class<?>) WebServerPlugin.class, (Object) map0,
                        (Class<?>) Map.class);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test_listDirectory_02() throws Throwable {
        // caseID:51833ef29d90f3953b7ea21f994a5a57
        LinkedList<File> linkedList0 = new LinkedList<File>();
        SimpleWebServer simpleWebServer0 = new SimpleWebServer("47", (-1), linkedList0, true);

        // prepare data for file0
        String[] stringArray0 = new String[0];
        File file0 = mock(File.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn((Object) stringArray0, (Object) stringArray0).when(file0).list(any(java.io.FilenameFilter.class));
        Object object0 =
                PrivateAccess.callMethod((Class<SimpleWebServer>) SimpleWebServer.class, simpleWebServer0, "listDirectory", (Object) "Reques", (Class<?>) String.class,
                        (Object) file0, (Class<?>) File.class);
        assertEquals(
                "<html><head><title>Directory Reques</title><style><!--\nspan.dirname { font-weight: bold; }\nspan.filesize { font-size: 75%; }\n// -->\n</style></head><body><h1>Directory Reques</h1></body></html>",
                object0);
    }

    @Test(timeout = 4000)
    public void test_serveFile_03() throws Throwable {
        // caseID:60de785ee7f6f40b6c6b1a1c31a72057
        File file0 = mock(File.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        SimpleWebServer simpleWebServer0 = new SimpleWebServer("range", 76, file0, true);

        // prepare data for map0
        Map<String, String> map0 = (Map<String, String>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(" KB", "-1910845740", "M&F&r$_}Ly=,qdKF'q").when(map0).get(any());

        // prepare data for file1
        File file1 = mock(File.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn("bytes", "FORBIDDEN").when(file1).getAbsolutePath();
        doReturn(1885L).when(file1).lastModified();
        doReturn((long) 5000, 3296L).when(file1).length();
        Response response0 =
                (Response) PrivateAccess.callMethod((Class<SimpleWebServer>) SimpleWebServer.class, simpleWebServer0, "serveFile", (Object) "-2080531653",
                        (Class<?>) String.class, (Object) map0, (Class<?>) Map.class, (Object) file1, (Class<?>) File.class, (Object) " bytes", (Class<?>) String.class);
        assertEquals("text/plain", response0.getMimeType());
    }

    @Test(timeout = 4000)
    public void test_serveFile_04() throws Throwable {
        // caseID:73e04406d8dfec047321c708943c5109
        File file0 = mock(File.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        SimpleWebServer simpleWebServer0 = new SimpleWebServer("range", 76, file0, true);

        // prepare data for map0
        Map<String, String> map0 = (Map<String, String>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn("Won't serve ../ for security reasons.", "RANGE_NOT_SATISFIABLE", "Partial Content").when(map0).get(any());

        // prepare data for file1
        File file1 = mock(File.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn("'", "Not Modified").when(file1).getAbsolutePath();
        doReturn(0L).when(file1).lastModified();
        doReturn(0L, (-1L)).when(file1).length();
        Response response0 =
                (Response) PrivateAccess.callMethod((Class<SimpleWebServer>) SimpleWebServer.class, simpleWebServer0, "serveFile", (Object) "-2080531653",
                        (Class<?>) String.class, (Object) map0, (Class<?>) Map.class, (Object) file1, (Class<?>) File.class, (Object) " bytes", (Class<?>) String.class);
        assertEquals("text/plain", response0.getMimeType());
    }

    @Test(timeout = 4000)
    public void test_serveFile_05() throws Throwable {
        // caseID:caffa1f9dd92b4888ea60239f17d2e09
        LinkedList<File> linkedList0 = new LinkedList<File>();
        SimpleWebServer simpleWebServer0 = new SimpleWebServer("bytes=", 47, linkedList0, false);

        // prepare data for map0
        Map<String, String> map0 = (Map<String, String>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn("-q", "NOT_MODIFIED", "*").when(map0).get(any());

        // prepare data for file0
        File file0 = mock(File.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn("FORBIDDEN").when(file0).getAbsolutePath();
        doReturn(0L).when(file0).lastModified();
        doReturn(1L, 0L).when(file0).length();
        Response response0 =
                (Response) PrivateAccess.callMethod((Class<SimpleWebServer>) SimpleWebServer.class, simpleWebServer0, "serveFile", (Object) "", (Class<?>) String.class,
                        (Object) map0, (Class<?>) Map.class, (Object) file0, (Class<?>) File.class, (Object) "l]VAjhUao<U%d", (Class<?>) String.class);
        assertEquals("l]VAjhUao<U%d", response0.getMimeType());
    }

    @Test(timeout = 4000)
    public void test_listDirectory_06() throws Throwable {
        // caseID:140176a4f609e1451185a82b8e99c498
        LinkedList<File> linkedList0 = new LinkedList<File>();
        SimpleWebServer simpleWebServer0 = new SimpleWebServer("<ul>", 63, linkedList0, true);

        // prepare data for file0
        String[] stringArray0 = new String[0];
        String[] stringArray1 = new String[4];
        stringArray1[0] = "([ |\t]*Content-Disposition[ |\t]*:)(.*)";
        stringArray1[1] = "([ |\t]*content-type[ |\t]*:)(.*)";
        stringArray1[2] = "([ |\t]*content-type[ |\t]*:)(.*)";
        stringArray1[3] = "text/html";
        File file0 = mock(File.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn((Object) stringArray0, (Object) stringArray1).when(file0).list(any(java.io.FilenameFilter.class));
        Object object0 =
                PrivateAccess.callMethod((Class<SimpleWebServer>) SimpleWebServer.class, simpleWebServer0, "listDirectory", (Object) "t bJQ3%RHQO=0D",
                        (Class<?>) String.class, (Object) file0, (Class<?>) File.class);
        assertEquals(
                "<html><head><title>Directory t bJQ3%RHQO=0D</title><style><!--\nspan.dirname { font-weight: bold; }\nspan.filesize { font-size: 75%; }\n// -->\n</style></head><body><h1>Directory t bJQ3%RHQO=0D</h1><ul><section class=\"directories\"><li><a rel=\"directory\" href=\"t%20bJQ3%25RHQO%3D0D%28%5B%20%7C%09%5D*Content-Disposition%5B%20%7C%09%5D*%3A%29%28.*%29/\"><span class=\"dirname\">([ |\t]*Content-Disposition[ |\t]*:)(.*)/</span></a></li><li><a rel=\"directory\" href=\"t%20bJQ3%25RHQO%3D0D%28%5B%20%7C%09%5D*content-type%5B%20%7C%09%5D*%3A%29%28.*%29/\"><span class=\"dirname\">([ |\t]*content-type[ |\t]*:)(.*)/</span></a></li><li><a rel=\"directory\" href=\"t%20bJQ3%25RHQO%3D0D%28%5B%20%7C%09%5D*content-type%5B%20%7C%09%5D*%3A%29%28.*%29/\"><span class=\"dirname\">([ |\t]*content-type[ |\t]*:)(.*)/</span></a></li><li><a rel=\"directory\" href=\"t%20bJQ3%25RHQO%3D0Dtext/html/\"><span class=\"dirname\">text/html/</span></a></li></section></ul></body></html>",
                object0);
    }

    @Test(timeout = 4000)
    public void test_listDirectory_07() throws Throwable {
        // caseID:c6abe0953e87963cf7c9d79bffbd95d6
        LinkedList<File> linkedList0 = new LinkedList<File>();
        SimpleWebServer simpleWebServer0 = new SimpleWebServer("<ul>", 63, linkedList0, true);

        // prepare data for file0
        String[] stringArray0 = new String[5];
        stringArray0[0] = "</h1>";
        stringArray0[1] = "t bJQ3%RHQO=0D";
        stringArray0[2] = "<ul>";
        stringArray0[3] = "origin,accept,content-type";
        stringArray0[4] = "text/plain";
        File file0 = mock(File.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn("org.nanohttpd.protocols.http.request.Method", "</a></body></html>", "Internal Server Error", "&oPw(rTDROcp", "-").when(file0).getAbsolutePath();
        doReturn((Object) stringArray0, (Object) stringArray0).when(file0).list(any(java.io.FilenameFilter.class));
        Object object0 =
                PrivateAccess.callMethod((Class<SimpleWebServer>) SimpleWebServer.class, simpleWebServer0, "listDirectory", (Object) "t bJQ3%RHQO=0D",
                        (Class<?>) String.class, (Object) file0, (Class<?>) File.class);
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test_listDirectory_08() throws Throwable {
        // caseID:4ec916429d8a8841b48958c92878577e
        File file0 = mock(File.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        SimpleWebServer simpleWebServer0 = new SimpleWebServer(" bytes", (-284), file0, false);

        // prepare data for file1
        String[] stringArray0 = new String[7];
        stringArray0[0] = "[ |\t]*([a-zA-Z]*)[ |\t]*=[ |\t]*['|\"]([^\"^']*)['|\"]";
        stringArray0[1] = "AccessControlAllowHeader";
        stringArray0[2] = " bytes";
        stringArray0[3] = "1";
        stringArray0[4] = " bytes";
        stringArray0[5] = "AccessControlAllowHeader";
        stringArray0[6] = "([ |\t]*content-type[ |\t]*:)(.*)";
        File file1 = mock(File.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(stringArray0).when(file1).list(any(java.io.FilenameFilter.class));
        Object object0 =
                PrivateAccess.callMethod((Class<SimpleWebServer>) SimpleWebServer.class, simpleWebServer0, "listDirectory", (Object) "", (Class<?>) String.class,
                        (Object) file1, (Class<?>) File.class);
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test_listDirectory_09() throws Throwable {
        // caseID:6c24931519b266d80d76ea4cb193a4c1
        LinkedList<File> linkedList0 = new LinkedList<File>();
        SimpleWebServer simpleWebServer0 = new SimpleWebServer("Won't serve ../ for security reasons.", 501, linkedList0, true);

        // prepare data for file0
        String[] stringArray0 = new String[3];
        stringArray0[0] = "([ |\t]*Content-Disposition[ |\t]*:)(.*)";
        stringArray0[1] = "SSL";
        stringArray0[2] = "([ |\t]*Content-Disposition[ |\t]*:)(.*)";
        File file0 = mock(File.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(stringArray0).when(file0).list(any(java.io.FilenameFilter.class));
        Object object0 =
                PrivateAccess.callMethod((Class<SimpleWebServer>) SimpleWebServer.class, simpleWebServer0, "listDirectory", (Object) "SSL", (Class<?>) String.class,
                        (Object) file0, (Class<?>) File.class);
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test_listDirectory_10() throws Throwable {
        // caseID:f1dd1062cd49a26f093376ccbb1cefbe
        File file0 = mock(File.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        SimpleWebServer simpleWebServer0 = new SimpleWebServer("FbJqm`;`vSY[s_", 47, file0, true, "Could not close");

        // prepare data for file1
        String[] stringArray0 = new String[4];
        stringArray0[0] = "Could not close";
        stringArray0[1] = "</section>";
        stringArray0[2] = "FbJqm`;`vSY[s_";
        stringArray0[3] = "Could not close";
        File file1 = mock(File.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(stringArray0).when(file1).list(any(java.io.FilenameFilter.class));
        Object object0 =
                PrivateAccess.callMethod((Class<SimpleWebServer>) SimpleWebServer.class, simpleWebServer0, "listDirectory", (Object) "</section>", (Class<?>) String.class,
                        (Object) file1, (Class<?>) File.class);
        assertNotNull(object0);
    }
}
