/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.org.nanohttpd.fileupload;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import java.io.InputStream;
import java.util.Map;
import org.apache.commons.fileupload.FileItemFactory;
import org.junit.runner.RunWith;
import org.nanohttpd.fileupload.NanoFileUpload;
import org.nanohttpd.protocols.http.IHTTPSession;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class NanoFileUpload_SSTest extends NanoFileUpload_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_getCharacterEncoding_0()  throws Throwable  {
      //caseID:09489b9b9ce95062639694cfbae44f34
      FileItemFactory fileItemFactory0 = mock(FileItemFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      NanoFileUpload nanoFileUpload0 = new NanoFileUpload(fileItemFactory0);
      IHTTPSession iHTTPSession0 = mock(IHTTPSession.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      NanoFileUpload.NanoHttpdContext nanoFileUpload_NanoHttpdContext0 = new NanoFileUpload.NanoHttpdContext(iHTTPSession0);
      String string0 = nanoFileUpload_NanoHttpdContext0.getCharacterEncoding();
      assertEquals("UTF-8", string0);
  }
  @Test(timeout = 4000)
  public void test_getItemIterator_1()  throws Throwable  {
      //caseID:0e03fb637320220ca868f6a15969f844
      FileItemFactory fileItemFactory0 = mock(FileItemFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      NanoFileUpload nanoFileUpload0 = new NanoFileUpload(fileItemFactory0);

      //prepare data for iHTTPSession0
      Map<String, String> map0 = (Map<String, String>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      IHTTPSession iHTTPSession0 = mock(IHTTPSession.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(map0).when(iHTTPSession0).getHeaders();
      try { 

        //invoke method for nanoFileUpload0
        nanoFileUpload0.getItemIterator(iHTTPSession0);
      } catch(Throwable e) {
         verifyException("org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl", e);
         assertEquals("org.apache.commons.fileupload.FileUploadBase$InvalidContentTypeException", e.getClass().getName());
         assertEquals("the request doesn't contain a multipart/form-data or multipart/mixed stream, content type header is null", e.getMessage());
      }
  }
  @Test(timeout = 4000)
  public void test_parseParameterMap_2()  throws Throwable  {
      //caseID:d99482c0bd162078403c438f76c49a95
      FileItemFactory fileItemFactory0 = mock(FileItemFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      NanoFileUpload nanoFileUpload0 = new NanoFileUpload(fileItemFactory0);

      //prepare data for iHTTPSession0
      Map<String, String> map0 = (Map<String, String>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      IHTTPSession iHTTPSession0 = mock(IHTTPSession.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(map0).when(iHTTPSession0).getHeaders();
      try { 

        //invoke method for nanoFileUpload0
        nanoFileUpload0.parseParameterMap(iHTTPSession0);
      } catch(Throwable e) {
         verifyException("org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl", e);
         assertEquals("org.apache.commons.fileupload.FileUploadBase$InvalidContentTypeException", e.getClass().getName());
         assertEquals("the request doesn't contain a multipart/form-data or multipart/mixed stream, content type header is null", e.getMessage());
      }
  }
  @Test(timeout = 4000)
  public void test_getContentLength_3()  throws Throwable  {
      //caseID:38ab5c37b1b67de96a9621ad8b537e33
      FileItemFactory fileItemFactory0 = mock(FileItemFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      NanoFileUpload nanoFileUpload0 = new NanoFileUpload(fileItemFactory0);

      //prepare data for iHTTPSession0
      Map<String, String> map0 = (Map<String, String>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(map0).get(any());
      IHTTPSession iHTTPSession0 = mock(IHTTPSession.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(map0).when(iHTTPSession0).getHeaders();
      NanoFileUpload.NanoHttpdContext nanoFileUpload_NanoHttpdContext0 = new NanoFileUpload.NanoHttpdContext(iHTTPSession0);
      int int0 = nanoFileUpload_NanoHttpdContext0.getContentLength();
      assertEquals(1, int0);
  }
  @Test(timeout = 4000)
  public void test_parseRequest_4()  throws Throwable  {
      //caseID:ac40a1d7b2a0f4a565e9a412dbb087fd
      FileItemFactory fileItemFactory0 = mock(FileItemFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      NanoFileUpload nanoFileUpload0 = new NanoFileUpload(fileItemFactory0);

      //prepare data for iHTTPSession0
      Map<String, String> map0 = (Map<String, String>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("multipart/form-data", "content-length", "1.0").when(map0).get(any());
      InputStream inputStream0 = mock(InputStream.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Map<String, String> map1 = (Map<String, String>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Map<String, String> map2 = (Map<String, String>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      IHTTPSession iHTTPSession0 = mock(IHTTPSession.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(map0, map2, map1).when(iHTTPSession0).getHeaders();
      doReturn(inputStream0).when(iHTTPSession0).getInputStream();
      try { 

        //invoke method for nanoFileUpload0
        nanoFileUpload0.parseRequest(iHTTPSession0);
      } catch(Throwable e) {
         verifyException("org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl", e);
         assertEquals("org.apache.commons.fileupload.FileUploadException", e.getClass().getName());
         assertEquals("the request was rejected because no multipart boundary was found", e.getMessage());
      }
  }}
